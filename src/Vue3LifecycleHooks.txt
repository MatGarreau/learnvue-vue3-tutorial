Code 1

<script>
	export default {
		mounted() {
			console.log('mounted!')
		},
		updated() {
			console.log('updated!')
		}
	}
</script>

Code 2

import { onMounted } from 'vue'

Code 3

import { onMounted } from 'vue'

export default {
  setup () {
    onMounted(() => {
      console.log('mounted in the composition api!')
    })
  }
}

Code 4

export default {
  data() {
    return {
      val: 'hello'
    }
  },
  beforeCreate() {
    console.log('Value of val is: ' + this.val)
  }
}

Code 5

export default {
  data() {
    return {
      val: 'hello'
    }
  },
  created() {
    console.log('Value of val is: ' + this.val)
  }
}

Code 6

import { ref } from 'vue'

export default {
  setup() {

    const val = ref('hello')

    console.log('Value of val is: ' + val.value)

		return {
			val
		}
  }
}

Code 7

export default {
  beforeMount() {
    console.log(this.$el)
  }
}

Code 8


<template>
  <div ref='root'>
    Hello World
  </div>
</template>

Code 9

mport { ref, onBeforeMount } from 'vue'

export default {
  setup() {

    const root = ref(null)

    onBeforeMount(() => {
      console.log(root.value)
    })

    return {
      root
    }
  },
  beforeMount() {
    console.log(this.$el)
  }
}

Code 10

import { ref, onMounted } from 'vue'

export default {
  setup() {    /* Composition API */

    const root = ref(null)

    onMounted(() => {
      console.log(root.value)
    })

    return {
      root
    }
  },
  mounted() { /* Options API */
    console.log(this.$el)
  }
}

Code 11

<template>
   <div>
     <p>{{val}} | edited {{ count }} times</p>
     <button @click='val = Math.random(0, 100)'>Click to Change</button>
   </div>
</template>

Code 12

export default {
      data() {
         return {
           val: 0
         }
      },
      beforeUpdate() {
         console.log("beforeUpdate() val: " + this.val)
      },
      updated() {
         console.log("updated() val: " + this.val
      }
}

Code 13

import { ref, onBeforeUpdate, onUpdated } from 'vue'

export default {
  setup () {
    const count = ref(0)
    const val = ref(0)

    onBeforeUpdate(() => {
      count.value++;
      console.log("beforeUpdate");
    })

    onUpdated(() => {
      console.log("updated() val: " + val.value)
    })

    return {
      count, val
    }
  }
}

Code 14

export default {
      mounted() {
        console.log('mount')
        window.addEventListener('resize', this.someMethod);
      },
      beforeUnmount() {
        console.log('unmount')
        window.removeEventListener('resize', this.someMethod);
      },
      methods: {
         someMethod() {
            // do smth
         }
      }
}

Code 15

import { onMounted, onBeforeUnmount } from 'vue'

export default {
  setup () {

    const someMethod = () => {
      // do smth
    }

    onMounted(() => {
      console.log('mount')
      window.addEventListener('resize', someMethod);
    })

    onBeforeUnmount(() => {
      console.log('unmount')
      window.removeEventListener('resize', someMethod);
    })

  }
}

Code 16

import { onUnmounted } from 'vue'

export default {
  setup () { /* Composition API */

    onUnmounted(() => {
      console.log('unmounted')
    })

  },
  unmounted() { /* Options API */
    console.log('unmounted')
  }
}

Code 17

<template>
   <div>
     <span @click='tabName = "Tab1"'>Tab 1 </span>
     <span @click='tabName = "Tab2"'>Tab 2</span>
     <keep-alive>
       <component :is='tabName' class='tab-area'/>
     </keep-alive>
   </div>
</template>
<script>
import Tab1 from './Tab1.vue'
import Tab2 from './Tab2.vue'
import { ref } from 'vue'

export default {
  components: {
    Tab1,
    Tab2
  },
  setup () { /* Composition API */

    const tabName = ref('Tab1')

    return {
      tabName
    }

  }
}
</script>

Code 18

<template>
	<div>
		<h2>Tab 1</h2>
		<input type='text' placeholder='this content will persist!'/>
	</div>
</template>

<script>
import { onActivated } from 'vue'
export default {
	setup() {
		onActivated(() => {
			console.log('Tab 1 Activated')
		})
	}
}
</script>

Code 19

<script>
import { onActivated, onDeactivated } from 'vue'
export default {
	setup() {
		onActivated(() => {
			console.log('Tab 1 Activated')
		})

		onDeactivated(() => {
			console.log('Tab 1 Deactivated')
		})
	}
}
</script>

Code 20
